// <auto-generated />
using System;
using Indulgence.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Park.Migrations
{
    [DbContext(typeof(IndulgenceContext))]
    partial class IndulgenceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Indulgence.Models.Cocktail", b =>
                {
                    b.Property<int>("CocktailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DrinkName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.HasKey("CocktailId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            CocktailId = 1,
                            DrinkName = "James Bond Vesper"
                        },
                        new
                        {
                            CocktailId = 2,
                            DrinkName = "Black Manhattan"
                        },
                        new
                        {
                            CocktailId = 3,
                            DrinkName = "White Gummy Bear"
                        });
                });

            modelBuilder.Entity("Indulgence.Models.CocktailIngredient", b =>
                {
                    b.Property<int>("CocktailIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("CocktailIngredientId");

                    b.HasIndex("CocktailId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredient");
                });

            modelBuilder.Entity("Indulgence.Models.CocktailStep", b =>
                {
                    b.Property<int>("CocktailStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.HasKey("CocktailStepId");

                    b.HasIndex("CocktailId");

                    b.HasIndex("StepId");

                    b.ToTable("CocktailStep");
                });

            modelBuilder.Entity("Indulgence.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CocktailId")
                        .HasColumnType("int");

                    b.Property<string>("IngredientName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IngredientType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IngredientId");

                    b.HasIndex("CocktailId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Indulgence.Models.Step", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("StepName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StepType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("StepId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("Indulgence.Models.CocktailIngredient", b =>
                {
                    b.HasOne("Indulgence.Models.Cocktail", "Cocktail")
                        .WithMany("JoinEntities")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Indulgence.Models.Ingredient", "Ingredient")
                        .WithMany("JoinEntities")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cocktail");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Indulgence.Models.CocktailStep", b =>
                {
                    b.HasOne("Indulgence.Models.Cocktail", "Cocktail")
                        .WithMany()
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Indulgence.Models.Step", "Step")
                        .WithMany("JoinEntities")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cocktail");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Indulgence.Models.Ingredient", b =>
                {
                    b.HasOne("Indulgence.Models.Cocktail", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("CocktailId");
                });

            modelBuilder.Entity("Indulgence.Models.Cocktail", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("Indulgence.Models.Ingredient", b =>
                {
                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("Indulgence.Models.Step", b =>
                {
                    b.Navigation("JoinEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
